
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  0000014a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005e  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000013a  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c8  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000130  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000096  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000049  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	3f d0       	rcall	.+126    	; 0xc2 <main>
  44:	46 c0       	rjmp	.+140    	; 0xd2 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <SendOneByte>:
void SendOneByte(unsigned char Data)
{
	unsigned char i;
	unsigned char temp = Data;
	
	OutSCL_0;
  48:	aa 98       	cbi	0x15, 2	; 21
  4a:	20 e0       	ldi	r18, 0x00	; 0
  4c:	30 e0       	ldi	r19, 0x00	; 0
	for(i = 0;i < 8;i++){
	    if(temp & (0x80>>i)){
  4e:	60 e8       	ldi	r22, 0x80	; 128
  50:	70 e0       	ldi	r23, 0x00	; 0
  52:	48 2f       	mov	r20, r24
  54:	50 e0       	ldi	r21, 0x00	; 0
  56:	cb 01       	movw	r24, r22
  58:	02 2e       	mov	r0, r18
  5a:	02 c0       	rjmp	.+4      	; 0x60 <SendOneByte+0x18>
  5c:	95 95       	asr	r25
  5e:	87 95       	ror	r24
  60:	0a 94       	dec	r0
  62:	e2 f7       	brpl	.-8      	; 0x5c <SendOneByte+0x14>
  64:	84 23       	and	r24, r20
  66:	95 23       	and	r25, r21
  68:	89 2b       	or	r24, r25
  6a:	11 f0       	breq	.+4      	; 0x70 <SendOneByte+0x28>
	        OutSDA_1;
  6c:	ab 9a       	sbi	0x15, 3	; 21
  6e:	01 c0       	rjmp	.+2      	; 0x72 <SendOneByte+0x2a>
	    }else{
	        OutSDA_0;
  70:	ab 98       	cbi	0x15, 3	; 21
	    }
	    OutSCL_0;
  72:	aa 98       	cbi	0x15, 2	; 21
	    OutSCL_1;
  74:	aa 9a       	sbi	0x15, 2	; 21
  76:	2f 5f       	subi	r18, 0xFF	; 255
  78:	3f 4f       	sbci	r19, 0xFF	; 255
{
	unsigned char i;
	unsigned char temp = Data;
	
	OutSCL_0;
	for(i = 0;i < 8;i++){
  7a:	28 30       	cpi	r18, 0x08	; 8
  7c:	31 05       	cpc	r19, r1
  7e:	59 f7       	brne	.-42     	; 0x56 <SendOneByte+0xe>
	        OutSDA_0;
	    }
	    OutSCL_0;
	    OutSCL_1;
	}
}
  80:	08 95       	ret

00000082 <IsInSCLUp>:

bool IsInSCLUp(void)
{
	bool temp;
	
	temp = (PINB >> bit_InSCL) & 0x01;
  82:	96 b3       	in	r25, 0x16	; 22
  84:	91 70       	andi	r25, 0x01	; 1
	if(Flag_InSCL_UP != temp){
  86:	80 91 60 00 	lds	r24, 0x0060
  8a:	89 17       	cp	r24, r25
  8c:	11 f4       	brne	.+4      	; 0x92 <IsInSCLUp+0x10>
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	08 95       	ret
	    Flag_InSCL_UP = temp;
  92:	90 93 60 00 	sts	0x0060, r25
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	91 30       	cpi	r25, 0x01	; 1
  9a:	09 f4       	brne	.+2      	; 0x9e <IsInSCLUp+0x1c>
  9c:	81 e0       	ldi	r24, 0x01	; 1
	    else
	        return 0;
	}else{
	    return 0;
	}
}
  9e:	08 95       	ret

000000a0 <ReceiveOneByte>:
unsigned char ReceiveOneByte(void)
{
  a0:	0f 93       	push	r16
  a2:	1f 93       	push	r17
  a4:	00 e0       	ldi	r16, 0x00	; 0
  a6:	10 e0       	ldi	r17, 0x00	; 0
    unsigned char i = 0;
    unsigned char temp = 0;
    do{
        if(IsInSCLUp()){
  a8:	ec df       	rcall	.-40     	; 0x82 <IsInSCLUp>
  aa:	88 23       	and	r24, r24
  ac:	21 f0       	breq	.+8      	; 0xb6 <ReceiveOneByte+0x16>
            temp <<= 1;
  ae:	11 0f       	add	r17, r17
            i++;
  b0:	0f 5f       	subi	r16, 0xFF	; 255
		    if(IsInSDA())
  b2:	b1 99       	sbic	0x16, 1	; 22
		        temp |= 0x01;
  b4:	11 60       	ori	r17, 0x01	; 1
		}    
    }while(i<8);
  b6:	08 30       	cpi	r16, 0x08	; 8
  b8:	b8 f3       	brcs	.-18     	; 0xa8 <ReceiveOneByte+0x8>
    return temp;
}
  ba:	81 2f       	mov	r24, r17
  bc:	1f 91       	pop	r17
  be:	0f 91       	pop	r16
  c0:	08 95       	ret

000000c2 <main>:
int main(void)
{
    unsigned char t;
	DDRC = 0xFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	84 bb       	out	0x14, r24	; 20
	DDRB = 0x00;
  c6:	17 ba       	out	0x17, r1	; 23
	Flag_InSCL_UP = 0;
  c8:	10 92 60 00 	sts	0x0060, r1
	while(1)
	{
		t = ReceiveOneByte();
  cc:	e9 df       	rcall	.-46     	; 0xa0 <ReceiveOneByte>
		SendOneByte(t);
  ce:	bc df       	rcall	.-136    	; 0x48 <SendOneByte>
  d0:	fd cf       	rjmp	.-6      	; 0xcc <main+0xa>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
